/*	av.as		implements an abstracted "media player"	obvious improvements would be to refactor code into classes (to avoid the recurring switch statements) -- but since we're unlikely	to ever need to implement a third media type, why bother?*/import fl.video.FLVPlayback;trace(FLVPlayback.VERSION);var media_url:String = "media/walk.m4v";/*	Is there a movie set by flashVars?*/if( loaderInfo.parameters.media_url ){	media_url = loaderInfo.parameters.media_url;}/*	Resizing*/function handle_resize( e:Event = null ){	media_player.width = stage.stageWidth;	media_player.height = stage.stageHeight;		// Scale control_panel to fit, if necessary	var w = control_panel.width / control_panel.scaleX;	var h = control_panel.height / control_panel.scaleY;	if( stage.stageWidth < w || stage.stageHeight < h ){		control_panel.scaleX = control_panel.scaleY = Math.min( stage.stageWidth / w, stage.stageHeight / h );	}	control_panel.x = (stage.stageWidth - control_panel.width ) * 0.5;	control_panel.y = stage.stageHeight - control_panel.height;	trace( stage.stageWidth + ", " + stage.stageHeight );}this.stage.addEventListener( Event.RESIZE, handle_resize );/*	Start everything off at the right size*/handle_resize();/*	Allow videos to be swapped in at runtime*/function set_media( url:String, loadAsSound:Boolean = false, autoPlay:Boolean = false ){	trace( "loaded: " + url );	do_pause();	if( url.substr(-4) == '.mp3' || loadAsSound ){		this.sound = new Sound();		this.sound.load(new URLRequest(url));		this.sound_position = 0;		control_panel.full_screen_button.visible = false;		trace( "playing audio" );		this.mode = "audio";		media_player.visible = false;	} else {		media_player.load( url, 0, false );		trace( "playing video" );		this.mode = "video";		media_player.visible = true;	}	if( autoPlay ){		do_play();	}}ExternalInterface.addCallback("set_media", set_media);control_panel.play_button.addEventListener( MouseEvent.MOUSE_UP, do_play );control_panel.pause_button.addEventListener( MouseEvent.MOUSE_UP, do_pause );control_panel.full_screen_button.addEventListener( MouseEvent.MOUSE_UP, do_toggle_fullscreen );control_panel.normal_screen_button.addEventListener( MouseEvent.MOUSE_UP, do_toggle_fullscreen );control_panel.seek_bar.addEventListener( MouseEvent.MOUSE_UP, do_seek );media_player.fullScreenTakeOver = false;stage.addEventListener( Event.ENTER_FRAME, updater );/*	Load the initial media_url*/set_media( media_url );function updater( e:Event ){	switch( this.mode ){		case "audio":			control_panel.full_screen_button.visible = false;			control_panel.normal_screen_button.visible = false;			break;		case "video":			if( stage.displayState == StageDisplayState.NORMAL ){				control_panel.full_screen_button.visible = true;				control_panel.normal_screen_button.visible = false;			} else {				control_panel.full_screen_button.visible = false;				control_panel.normal_screen_button.visible = true;			}			break;	}		control_panel.position_bar.scaleX = position();		control_panel.loaded_bar.scaleX = loaded();	control_panel.play_button.visible = !playing();	control_panel.pause_button.visible = playing();	var s:Number = remaining();	var m:Number = Math.floor(s / 60);	s %= 60;	var t:String =  s < 10 ? m + ":0" + s : m + ":" + s;	control_panel.time_display.text = t;}function loaded():Number {	switch( this.mode ){		case "audio":			return (this.sound.bytesLoaded / this.sound.bytesTotal);			break;		case "video":			return (media_player.bytesLoaded / media_player.bytesTotal);			break;		default:			return 0;	}}function position():Number {	switch( this.mode ){		case "audio":			if( this.sound_channel == null ){				return (this.sound_position / this.sound.length);			} else {				return (this.sound_channel.position / this.sound.length);			}			break;		case "video":			return (media_player.playheadTime / media_player.totalTime);			break;		default:			return 0;	}	}function remaining():Number {	switch( this.mode ){		case "audio":			if( this.sound_channel != null ){				return Math.round((this.sound.length - this.sound_channel.position) * 0.001);			} else {				control_panel.position_bar.scaleX = (this.sound_position / this.sound.length);				return Math.round((this.sound.length - this.sound_position) * 0.001);			}			break;		case "video":			return Math.round( media_player.totalTime - media_player.playheadTime );			break;		default:			return 0;	}}function playing():Boolean {	switch( this.mode ){		case "audio":			// we'll return false if we're within 250 milliseconds of the end of the track			return this.sound_channel != null && this.sound.length > this.sound_channel.position + 250;			break;		case "video":			return media_player.playing;			break;		default:			return false;	}}function done():Boolean {	return !playing() && remaining() == 0;}function do_play( e:Event = null ){	switch( this.mode ){		case "audio":			this.sound_channel = this.sound.play( this.sound_position );			break;		case "video":			media_player.play();			break;	}}function do_pause( e:Event = null ){	switch( this.mode ){		case "audio":			if( this.sound_channel ){				this.sound_position = this.sound_channel.position;				this.sound_channel.stop();				this.sound_channel = null;			}			break;		case "video":			media_player.pause();			break;	}}function do_toggle_fullscreen ( e:Event = null ){	if( stage.displayState != StageDisplayState.FULL_SCREEN ){		stage.displayState = StageDisplayState.FULL_SCREEN;	} else {		stage.displayState = StageDisplayState.NORMAL;	}}function do_seek ( e:MouseEvent = null ){	var p = e.localX / 168;	switch( this.mode ){		case "audio":			p *= this.sound.length;			if( this.sound_channel ){				this.sound_channel.stop();				this.sound_channel = null;				this.sound_channel = this.sound.play( p );			} else {				this.sound_position = p;			}			p *= 0.001;			break;		case "video":			p *= media_player.totalTime;			media_player.playheadTime = p;			break;	}	trace( "seeking to: " + p );}